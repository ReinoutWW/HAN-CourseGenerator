@page "/course/{Id:int?}"
@rendermode InteractiveServer

@using HAN.Services.DTOs
@using HAN.Services.Interfaces
@using NotificationService = HAN.Client.Server.Components.Base.SystemFeedbackNotificationService
@using HAN.Client.Server.Components.Pages.Course.Schedule
@using HAN.Client.Server.Components.UI

@inject IEvlService EvlService
@inject ICourseService CourseService
@inject NavigationManager NavigationManager
@inject NotificationService SystemFeedbackNotificationService

<h3>@(_course.Id == 0 ? "Create Course" : "Edit Course")</h3>

<div class="row">
    <div class="col-8">
        <RadzenTemplateForm Data="@_course" Submit="@((CourseDto args) => { Submit(args); })">
            <RadzenFieldset Text="Course Info">
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Name" Component="Name" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Style="width: 100%;" @bind-Value="_course.Name" Name="Name" />
                            <RadzenRequiredValidator Component="Name" Text="Name is required." />
                            <RadzenLengthValidator Component="Name" Min="5" Max="100" Text="Name must be between 5 and 100 characters." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Description" Component="Description" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextArea Style="width: 100%;" Rows="5" @bind-Value="_course.Description" Name="Description" />
                            <RadzenLengthValidator Component="Description" Max="450" Text="Description cannot exceed 450 characters." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Evaluations (Evls)" Component="Evls" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown
                                @bind-Value="_selectedEvls"
                                Data="@_allEvls"
                                Chips="true"
                                AllowClear="true"
                                Placeholder="Select evaluations"
                                TextProperty="Name"
                                ValueProperty="Id"
                                Multiple="true"
                                class="mb-2"
                                Style="width: 100%;" />
                            <RadzenLink Text="Create New Evaluation" Path="/evl/" />
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" Gap="1rem" class="rz-mt-8 rz-mb-4">
                <SecondaryButton Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
                <PrimaryButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />
            </RadzenStack>
        </RadzenTemplateForm>
    </div>
    <div class="col-4">
        <RadzenStack Gap="16px">
            <CourseValidationOverview
                @ref="@_courseValidationOverview"
                Course="@_course"
                Schedule="@_course.Schedule"
                HasValidateAction="false"
                ShowValidationDetails="false">
                <ChildContent>
                    <PrimaryButton Text="Go to Course Schedule" Style="width: 100%" Click="NavigateToSchedule" Icon="calendar_month"/>
                </ChildContent>
            </CourseValidationOverview>
            <RadzenFieldset Text="Course Grades">
                <PrimaryButton Text="Go to Course Grade Management" Style="width: 100%" Click="NavigateToGradeManagement" Icon="flag"/>
            </RadzenFieldset>
        </RadzenStack>

    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; } = null;
    
    private bool IsEditMode => Id.HasValue;
    private bool IsCreateMode => !Id.HasValue;
    private CourseDto _course = new();
    private List<int> _selectedEvls = [];
    private List<EvlDto> _allEvls = [];

    private CourseValidationOverview? _courseValidationOverview;
    
    protected override void OnInitialized()
    {
        _allEvls = EvlService.GetAllEvls().ToList();

        if (IsEditMode)
        {
            try
            {
                _course = CourseService.GetCourseById(Id.Value);
            }
            catch (KeyNotFoundException)
            {
                NavigationManager.NavigateTo("/404");
            }
            
            _selectedEvls = _course.Evls.Select(e => e.Id).ToList();
        }
        
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && _course?.Schedule != null)
        {
            _courseValidationOverview?.ValidateSchedule();
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    void Submit(CourseDto arg)
    {
        arg.Evls = _allEvls.Where(e => _selectedEvls.Contains(e.Id)).ToList();
        var courseDto = IsCreateMode ? CourseService.CreateCourse(arg) : CourseService.UpdateCourse(arg);
        
        NavigationManager.NavigateTo("/course/overview");
        SystemFeedbackNotificationService.AddNotification($"Course ({courseDto.Id}) saved successfully!");
    }
    
    private void Cancel() => NavigationManager.NavigateTo("/course/overview");
    private void NavigateToSchedule(MouseEventArgs obj) => NavigationManager.NavigateTo($"/course/{_course.Id}/schedule");
    private void NavigateToGradeManagement(MouseEventArgs obj) => NavigationManager.NavigateTo($"/course/{_course.Id}/grade");
}