@page "/blockchain/cluster"

@using HAN.Services.Interfaces
@using HAN.Utilities.Messaging.Models
@inject IMonitorService MonitorService

<h3>Blockchain Node Monitor</h3>

<RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
    <RadzenCard Variant="Variant.Outlined">
        <RadzenStack Orientation="Orientation.Horizontal"
                     AlignItems="AlignItems.Center"
                     Wrap="FlexWrap.Wrap">
        </RadzenStack>
    </RadzenCard>

    <RadzenChart Style="height: 400px">
        <!-- 
            Draw a line chart of active node counts over time.
            - Data: TimeSeriesData
            - CategoryProperty: Timestamp (x-axis)
            - ValueProperty: ActiveCount (y-axis)
         -->
        <RadzenLineSeries Data="@TimeSeriesData"
                          CategoryProperty="Timestamp"
                          ValueProperty="ActiveCount"
                          Title="Active Nodes"
                          Smooth="true">
            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
            <RadzenSeriesDataLabels Visible="true" />
        </RadzenLineSeries>

        <RadzenCategoryAxis Padding="10" FormatString="{0:HH:mm:ss}">
            <RadzenAxisTitle Text="Time" />
        </RadzenCategoryAxis>

        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Number of Active Nodes" />
        </RadzenValueAxis>
    </RadzenChart>
</RadzenStack>

<hr />

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div style="color:red">@ErrorMessage</div>
}

<RadzenDataGrid TItem="NodeStatus"
                Data="@ActiveNodes"
                ShowPager="false"
                ShowFilters="false"
                class="rz-my-2"
                ColumnWidth="180px">
    <Columns>
        <RadzenDataGridColumn TItem="NodeStatus" Property="NodeId" Title="Node ID" />
        <RadzenDataGridColumn TItem="NodeStatus"
                              Property="LastHeartbeat"
                              Title="Last Heartbeat"
                              FormatString="{0:yyyy-MM-dd HH:mm:ss}" />
    </Columns>
</RadzenDataGrid>

@code {
    private string ErrorMessage;
    private List<NodeStatus> ActiveNodes = new();
    private List<NodeTimeSeries> TimeSeriesData = new();

    protected override Task OnInitializedAsync()
    {
        MonitorService.OnNodeCountUpdated += OnNodeCountUpdated;

        ActiveNodes = MonitorService.GetActiveNodesAsync();
        TimeSeriesData.Add(new NodeTimeSeries
        {
            Timestamp = DateTime.UtcNow,
            ActiveCount = ActiveNodes.Count
        });

        return Task.CompletedTask;
    }

    private void OnNodeCountUpdated(int newCount)
    {
        try
        {
            ActiveNodes = MonitorService.GetActiveNodesAsync();

            TimeSeriesData.Add(new NodeTimeSeries
            {
                Timestamp = DateTime.UtcNow,
                ActiveCount = newCount
            });
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

        InvokeAsync(StateHasChanged);
    }

    public class NodeTimeSeries
    {
        public DateTime Timestamp { get; set; }
        public int ActiveCount { get; set; }
    }
}
