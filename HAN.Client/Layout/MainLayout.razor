@inherits LayoutComponentBase

@using NotificationMessage = HAN.Client.Components.Base.NotificationMessage
@using NotificationService = HAN.Client.Components.Base.NotificationService

<RadzenComponents />

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <RadzenLabel Text="CourseGenerator" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Path="/" Icon="home" />
            <RadzenPanelMenuItem Text="Courses" Path="/course/overview" Icon="School" />
            <RadzenPanelMenuItem Text="Evls" Path="/evl/overview" Icon="workspace_premium" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            <RadzenStack class="mt-2" Gap="16px">
                <div>
                    @foreach (var notification in Notifications)
                    {
                        <RadzenAlert Text="@notification.Text" AlertStyle="notification.Type" Variant="Variant.Flat" Shade="Shade.Lighter" />
                    }
                </div>
                @Body
            </RadzenStack>
        </div>
    </RadzenBody>
</RadzenLayout>

@code {
    bool sidebar1Expanded = true;
    [Inject] private NotificationService NotificationService { get; set; } = default!;
    private IReadOnlyList<NotificationMessage> Notifications => NotificationService.Notifications;

    protected override void OnInitialized()
    {
        NotificationService.OnNotificationAdded += StateHasChanged;
    }
}