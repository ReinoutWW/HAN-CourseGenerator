@inherits LayoutComponentBase
@implements IDisposable

@using HAN.Client.Auth
@using NotificationMessage = HAN.Client.Components.Base.SystemFeedbackNotificationMessage
@using NotificationService = HAN.Client.Components.Base.SystemFeedbackNotificationService
@using HAN.Client.Components.Base
@using HAN.Client.Components.UI

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<RadzenComponents />

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenStack class="ml-2" Orientation="Orientation.Horizontal" Gap="16px">
                <PrimaryButton Icon="@(_sidebar1Expanded ? "menu_open" : "menu")" Click="@(() => _sidebar1Expanded = !_sidebar1Expanded)" />
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px" class="d-flex align-items-center">
                    <RadzenIcon Icon="history_edu" />
                    <RadzenText Style="margin-bottom: 0" TextStyle="TextStyle.H6" Text="Learning | Student" />
                </RadzenStack>
            </RadzenStack>
            <div class="ml-auto mr-3">
                <AuthorizeView>
                    <Authorized>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8px">
                            <RadzenText class="mb-0" TextStyle="TextStyle.Body1">@context.User.Identity.Name</RadzenText>
                            <PrimaryButton @ref="_buttonRef" Icon="person"/>
                            <SecondaryButton Click="Logout" Icon="logout" />
                        </RadzenStack>
                    </Authorized>
                </AuthorizeView>
            </div>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@_sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Path="/" Icon="home" />
            <RadzenPanelMenuItem Text="Courses" Path="/course/overview" Icon="School" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <ErrorBoundary>
            <ChildContent>
                <div class="rz-p-4">
                    <RadzenStack Gap="16px">
                        <div>
                            @foreach (var notification in Notifications)
                            {
                                <RadzenAlert Text="@notification.Text" AlertStyle="notification.Type" Variant="Variant.Flat" Shade="Shade.Lighter"/>
                            }
                        </div>
                    </RadzenStack>
                    @Body
                </div>
            </ChildContent>
            <ErrorContent>
                <ErrorComponent PrimaryText="Whoops." SecondaryText="Something went wrong on our end." />
            </ErrorContent>
        </ErrorBoundary>
    </RadzenBody>
</RadzenLayout>

@code {
    [Inject] private NotificationService SystemFeedbackNotificationService { get; set; } = default!;
    
    private RadzenButton? _buttonRef;
    
    private bool _sidebar1Expanded = true;
    
    private IReadOnlyList<NotificationMessage> Notifications => SystemFeedbackNotificationService.SystemNotifications;

    protected override void OnInitialized()
    {
        SystemFeedbackNotificationService.OnSystemNotificationAdded += StateHasChanged;
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _buttonRef is not null)
        {
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private async Task Logout()
    {
        if (AuthenticationStateProvider is CustomAuthStateProvider authStateProvider)
        {
            authStateProvider.NotifyUserLogout();
            NavigationManager.NavigateTo("/authentication/login");
        }
    }
    
    public void Dispose()
    {
        SystemFeedbackNotificationService.OnSystemNotificationAdded -= StateHasChanged;
    }
}