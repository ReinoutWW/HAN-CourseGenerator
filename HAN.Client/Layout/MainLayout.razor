@inherits LayoutComponentBase
@implements IDisposable

@using HAN.Services
@using HAN.Services.VolatilityDecomposition
@using Radzen.Blazor.Rendering
@using NotificationMessage = HAN.Client.Components.Base.NotificationMessage
@using NotificationService = HAN.Client.Components.Base.NotificationService

@inject InternalNotificationStateService InternalNotificationStateService

<RadzenComponents />

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => _sidebar1Expanded = !_sidebar1Expanded)" />
            <RadzenLabel Text="CourseGenerator" />
            <div class="ml-auto mr-3">
                <RadzenButton Click="OpenExternalNotifications" @ref=@_buttonRef Variant="Variant.Flat" Shade="Shade.Lighter" Icon="@(_hasExternalNotifications ? "notifications_active" : "notifications")"/>
            </div>
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@_sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Path="/" Icon="home" />
            <RadzenPanelMenuItem Text="Courses" Path="/course/overview" Icon="School" />
            <RadzenPanelMenuItem Text="Evls" Path="/evl/overview" Icon="workspace_premium" />
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            <RadzenStack class="mt-2" Gap="16px">
                <div>
                    @foreach (var notification in Notifications)
                    {
                        <RadzenAlert Text="@notification.Text" AlertStyle="notification.Type" Variant="Variant.Flat" Shade="Shade.Lighter"/>
                    }
                </div>
                @Body
            </RadzenStack>
        </div>
    </RadzenBody>
</RadzenLayout>

<Popup @ref="_popup" Style="width: 350px;" class="han-popup" Show>
    <div class="notification-container">
        @if (InternalNotificationStateService.Notifications.Any())
        {
            @foreach (var notification in InternalNotificationStateService.Notifications)
            {
                <RadzenStack class="d-flex han-delimiter" Style="margin-bottom: 10px;" Gap="8px">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Level="1">
                        @notification.Title
                    </RadzenText>
                    <RadzenLink Path="course/overview" Text="Overview" Icon="edit"/>
                </RadzenStack>
            }
        }
        else
        {
            <div Style="text-align: center;">
                <RadzenText TextStyle="TextStyle.Subtitle1" Text="You're all set!" />
                <RadzenText TextStyle="TextStyle.Body2" Text="No notifications to display at the moment." />
            </div>
        }
    </div>
</Popup>

@code {
    [Inject] private NotificationService NotificationService { get; set; } = default!;
    
    Popup _popup;
    RadzenButton _buttonRef;
    
    private bool _hasExternalNotifications => InternalNotificationStateService.Notifications.Any();
    private bool _sidebar1Expanded = true;
    
    private IReadOnlyList<NotificationMessage> Notifications => NotificationService.Notifications;

    protected override void OnInitialized()
    {
        NotificationService.OnNotificationAdded += StateHasChanged;
        InternalNotificationStateService.OnNotificationsChanged += StateHasChanged;
    }
    
    public void Dispose()
    {
        NotificationService.OnNotificationAdded -= StateHasChanged;
        InternalNotificationStateService.OnNotificationsChanged -= StateHasChanged;
    }
    
    private void OpenExternalNotifications()
    {
        _popup.ToggleAsync(_buttonRef.Element);
    }
}