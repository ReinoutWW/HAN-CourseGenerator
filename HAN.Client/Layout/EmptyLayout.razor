@inherits LayoutComponentBase
@implements IDisposable

@using HAN.Client.Auth
@using NotificationMessage = HAN.Client.Components.Base.SystemFeedbackNotificationMessage
@using NotificationService = HAN.Client.Components.Base.SystemFeedbackNotificationService
@using HAN.Client.Components.Base

@inject AuthenticationStateProvider AuthenticationStateProvider

<RadzenComponents />

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Style="height: 100%; padding-left: 1rem;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="8px" class="d-flex align-items-center">
                <RadzenIcon Icon="history_edu" />
                <RadzenText Style="margin-bottom: 0" TextStyle="TextStyle.H6" Text="Learning | Student" />
            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>
    <RadzenBody>
        <ErrorBoundary>
            <ChildContent>
                <div class="rz-p-4">
                    <RadzenStack class="mt-2" Gap="16px">
                        <div>
                            @foreach (var notification in Notifications)
                            {
                                <RadzenAlert Text="@notification.Text" AlertStyle="notification.Type" Variant="Variant.Flat" Shade="Shade.Lighter"/>
                            }
                        </div>
                        @Body
                    </RadzenStack>
                </div>
            </ChildContent>
            <ErrorContent>
                <ErrorComponent PrimaryText="Whoops." SecondaryText="Something went wrong on our end." />
            </ErrorContent>
        </ErrorBoundary>
    </RadzenBody>
</RadzenLayout>

@code {
    [Inject] private NotificationService SystemFeedbackNotificationService { get; set; } = default!;

    private RadzenButton? _buttonRef;

    private bool _sidebar1Expanded = true;

    private IReadOnlyList<NotificationMessage> Notifications => SystemFeedbackNotificationService.SystemNotifications;

    protected override void OnInitialized()
    {
        SystemFeedbackNotificationService.OnSystemNotificationAdded += StateHasChanged;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _buttonRef is not null)
        {
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private async Task Login()
    {
        if (AuthenticationStateProvider is CustomAuthStateProvider authStateProvider)
        {
            authStateProvider.NotifyUserAuthentication("TestUser");
        }
    }

    private async Task Logout()
    {
        if (AuthenticationStateProvider is CustomAuthStateProvider authStateProvider)
        {
            authStateProvider.NotifyUserLogout();
        }
    }

    public void Dispose()
    {
        SystemFeedbackNotificationService.OnSystemNotificationAdded -= StateHasChanged;
    }
}

@code {
    
}