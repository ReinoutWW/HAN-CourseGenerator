@page "/course/{Id:int}/schedule"

@using System.Collections
@using System.ComponentModel
@using HAN.Services.DTOs
@using HAN.Services.Interfaces
@using NotificationService = HAN.Client.Components.Base.SystemFeedbackNotificationService
@using HAN.Client.Components.UI;
@using HAN.Services
@using HAN.Services.DTOs.CourseComponents
@using HAN.Services.Extensions
@using HAN.Services.Validation

@inject ICourseService CourseService
@inject CourseComponentService CourseComponentService
@inject NavigationManager NavigationManager
@inject NotificationService SystemFeedbackNotificationService
@inject ICourseValidationService CourseValidationService

<h3>@(_schedule.Id == 0 ? "Create Schedule" : "Edit Schedule")</h3>

<div class="row">
    <div class="col-8">
        <RadzenTemplateForm @bind-Data="@_schedule" Submit="@((ScheduleDto args) => { Submit(args); })">
            <RadzenFieldset Text="Schedule Info">
                <RadzenStack Gap="1rem">
                    <RadzenDataGrid @bind-Data="@_schedule.ScheduleLines" TItem="ScheduleLineDto" Editable="true" AutoGenerateColumns="false">
                        <Columns>
                            <RadzenDataGridColumn HeaderTooltip="true" Width="150px" TItem="ScheduleLineDto" Property="WeekSequenceNumber" Title="Week Number">
                                <Template Context="scheduleLine">
                                    <RadzenNumeric Style="width: 100%;" @bind-Value="scheduleLine.WeekSequenceNumber" Min="1" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn HeaderTooltip="true" Width="150px" TItem="ScheduleLineDto" Property="WeekSequenceNumber" Title="Course component number">
                                <EditTemplate Context="scheduleLine">
                                    CC Id: @scheduleLine.CourseComponentId
                                </EditTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Width="100%" TItem="ScheduleLineDto" Title="Component">
                                <Template Context="scheduleLine">
                                    <RadzenDropDown
                                        Data=@_groupedData 
                                        ValueProperty="UniqueKey" 
                                        TextProperty="DisplayName" 
                                        ItemRender="ItemRender"
                                        Style="width: 100%;"
                                        TValue="string"
                                        Value="@(_groupedData.FirstOrDefault(g => g.ComponentId == scheduleLine.CourseComponentId)?.UniqueKey)"
                                        ValueChanged="@((value) => OnSelectionChanged(value, scheduleLine))"
                                        Placeholder="Select component">
                                        <Template Context="selectionContext">
                                            <span style="display:inline-block; font-weight: @(selectionContext.EvlName != null ? "bold" : "normal");">
                                                @if (selectionContext.EvlName != null)
                                                {
                                                    @selectionContext.EvlName
                                                }
                                                else
                                                {
                                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" class="d-flex align-items-center">
                                                        <RadzenIcon Icon="@(selectionContext.CourseComponent is AssessmentDto ? "quiz" : "import_contacts")" />
                                                        @selectionContext.DisplayName
                                                        @if (HasValidationError(selectionContext.CourseComponent))
                                                        {
                                                            <RadzenBadge class="han-validation-error-pill" Variant="Variant.Flat" IsPill="true" Shade="Shade.Lighter" Text="!" BadgeStyle="BadgeStyle.Warning"/>
                                                        }
                                                    </RadzenStack>
                                                }
                                            </span>
                                        </Template>
                                    </RadzenDropDown>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Width="75px" TItem="ScheduleLineDto" Context="scheduleLine">
                                <Template Context="scheduleLine">
                                    <PrimaryButton Icon="delete" Size="ButtonSize.Medium" Click="@(() => RemoveScheduleLine(scheduleLine))" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    <SecondaryButton Icon="add" Size="ButtonSize.Medium" Text="Add Schedule Line" Click="@AddScheduleLine" />
                </RadzenStack>
            </RadzenFieldset>

            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8 rz-mb-4">
                <PrimaryButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />
                <SecondaryButton Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
            </RadzenStack>
        </RadzenTemplateForm>
    </div>
    <div class="col-4">
        <RadzenFieldset Text="Course validation">
            <RadzenStack Orientation="Orientation.Vertical" Gap="8px">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="8px">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Text="Course validation status:"/>
                    <span>
                        <RadzenBadge Variant="Variant.Flat" IsPill="true" Shade="Shade.Lighter" Text="@(_isCourseValid ? "Valid" : "Invalid")" BadgeStyle="@(_isCourseValid ? BadgeStyle.Success : BadgeStyle.Danger)"/>
                    </span>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Vertical" Gap="12px">
                    @if (_courseValidationResult != null)
                    {
                        <div class="han-delimiter" ></div>
                        
                        @foreach (var message in _courseValidationResult.Errors)
                        {
                            <div>
                                <RadzenBadge Variant="Variant.Flat" IsPill="true" Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Warning" Text="@(message.ErrorCategory.GetDescription() ?? "Error")" /> @message.Message
                            </div>
                        }
                        <div class="han-delimiter" ></div>
                    }
                </RadzenStack>
                <PrimaryButton Icon="check" Size="ButtonSize.Large" Text="Validate Schedule" Click="@ValidateSchedule"/>
            </RadzenStack>
        </RadzenFieldset>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private bool _isCourseValid = false;
    
    private CourseDto _course = new();
    private ScheduleDto _schedule = new()
    {
        ScheduleLines = new List<ScheduleLineDto>()
    };
    private readonly List<CourseComponentDto> _allCourseComponents = new();
    private IEnumerable<GroupData>? _groupedData;
    private CourseValidationResult? _courseValidationResult;

    protected override void OnInitialized()
    {
        if (Id > 0)
        {
            _course = CourseService.GetCourseById(Id);
            var courseEvls = _course.Evls.Select(evl => evl.Id).ToList();

            foreach (var evlId in courseEvls)
            {
                var courseComponents = CourseComponentService.GetAllCourseComponentsByEvlId(evlId).ToList();
                _allCourseComponents.AddRange(courseComponents);
            }

            _schedule = _course.Schedule == null ? CourseService.AddSchedule(new ScheduleDto(), Id) : CourseService.GetScheduleById(_course.Schedule.Id);
        }
        else
        {
            _schedule = new ScheduleDto();
        }

        InitializeGroupedDropdown();
        ValidateCourse();
        
        base.OnInitialized();
    }
    
        
    private void OnSelectionChanged(string uniqueKey, ScheduleLineDto scheduleLine)
    {
        var selectedComponent = _groupedData.FirstOrDefault(g => g.UniqueKey == uniqueKey);
        scheduleLine.CourseComponent = selectedComponent?.CourseComponent ?? throw new Exception("Invalid component selection.");
        
        if (selectedComponent != null)
        {
            Console.WriteLine($"Selected Component: {selectedComponent.ComponentName}");
        }
        
        StateHasChanged();
    }

    private void InitializeGroupedDropdown()
    {
        var evls = _course.Evls;

        _groupedData = evls
            .SelectMany(ev =>
            {
                Console.WriteLine($"Evl: {ev.Name}");
                var groupHeader = new GroupData
                {
                    EvlName = ev.Name,
                    ComponentId = null,
                    ComponentName = null,
                    UniqueKey = null
                };

                var components = _allCourseComponents
                    .Where(cc => cc.Evls.Any(e => e.Id == ev.Id))
                    .Select(cc =>
                    {
                        Console.WriteLine($"Component for {ev.Name}: {cc.Name}");

                        return new GroupData
                        {
                            EvlName = null, 
                            ComponentId = cc.Id,
                            ComponentName = cc.Name,
                            CourseComponent = cc,
                            UniqueKey = $"{ev.Id}_{cc.Id}"
                        };
                    });

                return new[] { groupHeader }.Concat(components);
            })
            .ToList();

        _groupedData.OrderBy(item => item.ComponentName is AssessmentDto).ThenBy(item => item.DisplayName);
    }

    private void AddScheduleLine()
    {
        var newSequenceNumber = _schedule.ScheduleLines.Any()
            ? _schedule.ScheduleLines.Max(line => line.WeekSequenceNumber) + 1
            : 1;

        _schedule.ScheduleLines.Add(new ScheduleLineDto
        {
            WeekSequenceNumber = newSequenceNumber,
            CourseComponent = new() // Default placeholder
        });

        _schedule.ScheduleLines = _schedule.ScheduleLines.ToList(); // Ensure UI refresh
    }

    private void RemoveScheduleLine(ScheduleLineDto line)
    {
        _schedule.ScheduleLines.Remove(line);
        _schedule.ScheduleLines = _schedule.ScheduleLines.ToList();
        
        StateHasChanged();
    }

    private void Submit(ScheduleDto arg)
    {
        if (!_schedule.ScheduleLines.Any())
        {
            SystemFeedbackNotificationService.AddNotification("Please add at least one schedule line.");
            return;
        }

        _schedule.ScheduleLines = _schedule.ScheduleLines
            .OrderBy(line => line.WeekSequenceNumber)
            .ToList();

        CourseService.UpdateSchedule(_schedule);
        NavigationManager.NavigateTo($"/course/{Id}");
        SystemFeedbackNotificationService.AddNotification("Schedule saved successfully!");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/course/{Id}");
    }

    private void ValidateSchedule()
    {
        _course.Schedule = _schedule;
        var validationResult = CourseValidationService.ValidateCourse(_course);
        _courseValidationResult = validationResult;
        _isCourseValid = validationResult.IsValid;
        
        if (validationResult.IsValid)
            SystemFeedbackNotificationService.AddNotification("Schedule is valid!");
        else
            SystemFeedbackNotificationService.AddNotification("Schedule is invalid!", AlertStyle.Danger);
    }

    private bool ValidateCourse()
    {
        _isCourseValid = CourseValidationService.ValidateCourse(_course).IsValid;
        return _isCourseValid;
    }
    
    class GroupData
    {
        public string EvlName { get; set; } 
        public int? ComponentId { get; set; } 
        public string ComponentName { get; set; }
        public string UniqueKey { get; set; }
        public CourseComponentDto CourseComponent { get; set; }

        public string DisplayName => EvlName ?? ComponentName;
    }
    
    void ItemRender(dynamic args)
    {
        var data = (GroupData)args.Item;
        if (data.EvlName != null)
        {
            // Disable group headers (Evls)
            args.Disabled = true;
            args.Attributes.Add("style", "opacity: 1");
        }
        else
        {
            // Indent CourseComponents under Evls
            args.Attributes.Add("style", "margin-inline-start: 1rem");
        }
    }

    private bool HasValidationError(CourseComponentDto courseComponent)
    {
        if(_courseValidationResult == null)
            return false;
        
        var errors = _courseValidationResult.Errors;
        return errors.Any(e => e.CourseComponentId == courseComponent.Id);
    }
}
